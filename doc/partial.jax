*partial.jax*	囲みの範囲を別ファイルにして、編集しやすくします。

Version : v0.1
Author  : yasunori-kirin0418
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
						*partial-contents*
目次~

概要				|partial-introduction|
使い方				|partial-usage|
インターフェイス		|partial-interface|
  変数				  |partial-variables|
  コマンド			  |partial-commands|
  関数				  |partial-functions|
囲みの例		  	|partial-surround-examples|
TODO				|partial-todo|
更新履歴			|partial-changelog|


==============================================================================
						*partial-introduction*
概要~

*partial.vim* は囲みの範囲を別ファイルにして、編集できるようにします。
また、編集した内容を元ファイルに反映できます。
マークダウンのコードブロックや、|dein|で使用できるtomlファイル内で記述できるluaや
vim scriptを別ファイルにすることで、LSPやフォーマッターを使えるようにして編集しやすくします。

最新版:
https://github.com/yasunori-kirin0418/partial.vim


==============================================================================
						*partial-usage*
使い方~

マークダウンでコードブロックによる別の言語を書く際に、コードブロックの最初の行に
`" <% partial_path: ./partial/partial.vim`と、最後の行に`" %>`をコメントとして
記述します。このファイルは元ファイルと呼びます。
>
	" <% partial_path: ./partial/partial.vim
	
	echo 'hello world!'
	
	" %>
<
これが|partial.vim|における囲みと呼ばれるものです。
囲み内で、`:PartialOpen vim`を実行してください。
NOTE: コマンドに関しては、|partial-commands|を確認してください。

`partial_path: `以降に指定したファイルパスに、囲まれた範囲のコードを
別ファイルとして生成しファイルを開きます。
実体のあるファイルとして生成するので、LSPやハイライトが機能した環境で編集が可能になります。
生成されるファイルは、元ファイルからの相対パスが指定できます。
また、環境変数を使用した絶対パスも指定可能です。
NOTE: 囲みに関しては、|partial-surround-examples|を確認してください。

別ファイルでの編集が終ったら、`:PartialUpdate`を実行してください。
別ファイルの内容を元ファイルで囲んだ範囲に反映します。
この時元ファイルの内容は別ファイルの内容で上書きされます。


==============================================================================
						*partial-interface*
インターフェイス~

------------------------------------------------------------------------------
						*partial-variables*
変数~

g:partial#comment_out_symbols			*g:partial#comment_out_symbols*
	既定値:  { 'vim': '"', 'lua': '--' }
	囲みの範囲に使われている言語のコメントアウト記号。
	キーは|filetype|で、値には言語で使われているコメントアウトの記号にする。

	NOTE: 現状HTMLやCSSのようなコメントアウト記号には対応していません。


g:partial#head_symbol				*g:partial#head_symbol*
	既定値:  ' <%'
g:partial#tail_symbol				*g:partial#tail_symbol*
	既定値:  ' %>'
	別ファイルにする範囲の囲みを作る際に、囲みとしての目印になります。
	コード中に出てこないような、ユニークな文字列にするのをお勧めします。

	NOTE: この値の使い方は、|partial-surround-examples|を確認してください。


g:partial#partial_path_prefix			*g:partial#partial_path_prefix*
	既定値:  ' partial_path: '
	別ファイルにする範囲の囲みで、別ファイルのパスを指定する手前の文字列です。

	NOTE: この値の使い方は、|partial-surround-examples|を確認してください。
	NOTE: このプラグインでの囲みであると理解しているなら空でも問題ありません。


g:partial#origin_path_prefix			*g:partial#origin_path_prefix*
	既定値:  ' origin_path: '
	別ファイル生成時に紐付く、元ファイルのパスの手前に挿入される文字列です。

	NOTE: この値の使い方は、|partial-surround-examples|を確認してください。
	NOTE: このプラグインによる囲みであると理解しているなら空でも問題ありません。


g:partial#open_type				*g:partial#open_type*
	既定値:  'edit'
	|:PartialOpen|による別ファイルの開き方を指定できます。
	使用できる値は下記の通りです。

		'edit'		`:edit`と同じ
		'vsplit'	`:vsplit`と同じ
		'split'		`:split`と同じ
		'tabedit'	`:tabedit`と同じ


------------------------------------------------------------------------------
						*partial-commands*
コマンド~

:PartialOpen[!] {filetype}			*:PartialOpen*
	元ファイルで正しく囲みを設定できている範囲内で実行してください。
	囲みで指定した別ファイルを生成して開きます。
	ファイルの開き方は|g:partial#open_type|に設定されている方法になります。
	{filetype}には囲み内の言語を指定します。指定できる言語は、
	|g:partial#comment_out_symbols|に設定できている物に限ります。
	コマンド実行時に[!]を使用すると既に生成されているファイルを開くだけです。

	NOTE: 既にファイルを生成した状態で[!]なしで実行すると、
	      元ファイルの内容で別ファイルを上書きします。


:PartialTabedit[!] {filetype}			*:PartialTabedit*
	使い方は|:PartialOpen|と同じです。別ファイルをタブで開きます。


:PartialVsplit[!] {filetype}			*:PartialVsplit*
	使い方は|:PartialOpen|と同じです。別ファイルを垂直分割で開きます。


:PartialSplit[!] {filetype}			*:PartialSplit*
	使い方は|:PartialOpen|と同じです。別ファイルを水平分割で開きます。


:PartialEdit[!] {filetype}			*:PartialEdit*
	使い方は|:PartialOpen|と同じです。別ファイルを現在のバッファウィンドウで開きます。


:PartialUpdate					*:PartialUpdate*
	このプラグインで生成した別ファイル内で実行してください。
	別ファイルでの編集内容を元ファイルに反映します。

	NOTE: 元ファイルの対象範囲を別ファイルの内容で上書きします。


------------------------------------------------------------------------------
						*partial-functions*
関数~

						*partial#open()*
partial#open({create_flag}, {filetype}, {open_type} = |g:partial#open_type|)
	|:PartialOpen|の実装に使われています。
	実行する際は囲みを設定したファイル内で実行してください。
	ファイルを作成する場合は{create_flag}を|TRUE|にします。
	{filetype}は囲みの中で使われている言語です。
	{open_type}は|g:partial#open_type|に設定できる値です。


						*partial#create()*
partial#create({create_flag}, {filetype})
	|partial#open()|の実装に使用されています。
	実行する際は囲みを設定したファイル内で実行してください。
	ファイルを作成する場合は{create_flag}を|TRUE|にします。
	{filetype}は囲みの中で使われている言語です。


partial#update_origin()				*partial#update_origin()*
	|:PartialUpdate|の実装に使用されています。
	実行する際は|partial#create()|で生成したファイル内で実行してください。
	別ファイルでの編集内容を元ファイルに反映します。

	NOTE: 元ファイルの対象範囲を別ファイルの内容で上書きします。


==============================================================================
						*partial-surround-examples*
囲みの例~


==============================================================================
						*partial-changelog*
更新履歴~

2023-01-12 v0.1	  基本機能の実装完了

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen
